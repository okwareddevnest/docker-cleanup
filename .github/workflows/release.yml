name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup GPG
        run: |
          mkdir -p ~/.gnupg
          chmod 700 ~/.gnupg
          echo "allow-loopback-pinentry" > ~/.gnupg/gpg-agent.conf
          echo "pinentry-mode loopback" > ~/.gnupg/gpg.conf
          gpg --batch --yes --import <<< "${{ secrets.GPG_PRIVATE_KEY }}"
          echo "default-cache-ttl 7200" >> ~/.gnupg/gpg-agent.conf
          echo "max-cache-ttl 7200" >> ~/.gnupg/gpg-agent.conf
          gpg-connect-agent reloadagent /bye
          gpg --list-secret-keys --keyid-format LONG

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y reprepro

      - name: Build package
        env:
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          GNUPGHOME: ~/.gnupg
        run: |
          echo "test" | gpg --batch --yes --pinentry-mode loopback --passphrase "$GPG_PASSPHRASE" -as >/dev/null 2>&1 || exit 1
          make clean
          make publish

      - name: Generate release notes
        id: release_notes
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          
          # Find the previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 $TAG^ 2>/dev/null || echo "")
          
          if [ -z "$PREV_TAG" ]; then
            NOTES=$(git log --pretty=format:"* %s (%h)" $TAG)
          else
            NOTES=$(git log --pretty=format:"* %s (%h)" $PREV_TAG..$TAG)
          fi
          
          # Create release notes with installation instructions
          {
            echo "# Docker Cleanup $TAG"
            echo ""
            echo "## Changes in this release:"
            echo ""
            echo "$NOTES"
            echo ""
            echo "## Installation Instructions"
            echo ""
            echo "```bash"
            echo "# Add the GPG key"
            echo "curl -fsSL https://raw.githubusercontent.com/okwareddevnest/docker-cleanup/main/docker-cleanup.gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-cleanup-archive-keyring.gpg"
            echo ""
            echo "# Add the repository"
            echo "echo \"deb [signed-by=/usr/share/keyrings/docker-cleanup-archive-keyring.gpg] https://raw.githubusercontent.com/okwareddevnest/docker-cleanup/main/repo stable main\" | sudo tee /etc/apt/sources.list.d/docker-cleanup.list"
            echo ""
            echo "# Update and install"
            echo "sudo apt-get update"
            echo "sudo apt-get install docker-cleanup"
            echo "```"
          } > RELEASE_NOTES.md
          
          RELEASE_NOTES_CONTENT=$(cat RELEASE_NOTES.md)
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_NOTES_CONTENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            docker-cleanup-1.0.0.deb
            docker-cleanup.gpg
          body: ${{ steps.release_notes.outputs.notes }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 